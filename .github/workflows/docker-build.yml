name: Build, Tag, and Release Bootable Images

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # Get the current version from the VERSION file
    - name: Get current version
      id: get_version
      run: |
        VERSION=$(cat VERSION)
        echo "Current version: $VERSION"
        echo "::set-output name=version::$VERSION"

    # Increment the version (patch version bump)
    - name: Increment version
      id: increment_version
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "Current version is: $VERSION"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH+1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo "$NEW_VERSION" > VERSION
        echo "::set-output name=new_version::$NEW_VERSION"

    # Commit the new version to the repository
    - name: Commit new version
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://$GHCR_PAT@github.com/${{ github.repository }}.git
        git add VERSION
        git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }}"
        git push origin main
      env:
        GHCR_PAT: ${{ secrets.GHCR_PAT }}

    # Build Docker Image
    - name: Build Docker Image
      run: |
        NEW_VERSION="${{ steps.increment_version.outputs.new_version }}"
        docker build --tag ghcr.io/${{ github.repository }}/alpine-nmap-python:$NEW_VERSION .

    - name: Push Docker Image
      run: |
        NEW_VERSION="${{ steps.increment_version.outputs.new_version }}"
        docker push ghcr.io/${{ github.repository }}/alpine-nmap-python:$NEW_VERSION

    # Install genisoimage
    - name: Install genisoimage
      run: |
        sudo apt-get update
        sudo apt-get install -y genisoimage

    # Generate bootable .img and .iso files
    - name: Create Bootable .img and .iso Files
      run: |
        # Create bootable image file (.img)
        dd if=/dev/zero of=bootable_image.img bs=1M count=1024
        mkfs.ext4 bootable_image.img

        # Create bootable ISO file (.iso)
        mkdir iso_dir
        genisoimage -o bootable_image.iso -J -R -V "BOOTABLE_ISO" iso_dir

    # List files for verification
    - name: List files for debugging
      run: ls -la

    # Upload artifacts for use in the release job
    - name: Upload Bootable Files as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bootable_files
        path: |
          bootable_image.img
          bootable_image.iso

    # Push the new tag to the repository
    - name: Tag new version and push
      run: |
        NEW_VERSION="${{ steps.increment_version.outputs.new_version }}"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
      env:
        GHCR_PAT: ${{ secrets.GHCR_PAT }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Download artifacts from the build job
    - name: Download Bootable Files
      uses: actions/download-artifact@v3
      with:
        name: bootable_files

    # Create GitHub Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
      with:
        tag_name: ${{ needs.build.outputs.new_version }}
        release_name: Release ${{ needs.build.outputs.new_version }}
        draft: false
        prerelease: false

    # Upload bootable .img file as a release asset
    - name: Upload Bootable .img File
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bootable_image.img
        asset_name: bootable_image_${{ needs.build.outputs.new_version }}.img
        asset_content_type: application/octet-stream

    # Upload bootable .iso file as a release asset
    - name: Upload Bootable .iso File
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bootable_image.iso
        asset_name: bootable_image_${{ needs.build.outputs.new_version }}.iso
        asset_content_type: application/octet-stream
