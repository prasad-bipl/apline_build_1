name: Build and Release Alpine Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
        default: 'latest'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4 # Updated to v4 for Node.js 20 compatibility

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3 # Updated to v3 for Node.js 20 compatibility

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker Image
      run: |
        # Use 'latest' if no version is provided
        VERSION=${{ github.event.inputs.version || 'latest' }}
        # Build and tag the Docker image with the given version or 'latest'
        docker build --tag ghcr.io/${{ github.repository }}/alpine-nmap-python:$VERSION .

    - name: Push Docker Image to GitHub Container Registry
      run: |
        # Use 'latest' if no version is provided
        VERSION=${{ github.event.inputs.version || 'latest' }}
        # Push the Docker image with the given version or 'latest'
        docker push ghcr.io/${{ github.repository }}/alpine-nmap-python:$VERSION

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        echo "Release ${{ github.event.inputs.version }} published!"
